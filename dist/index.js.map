{"version":3,"sources":["../src/index.ts","../src/providers/modal.ts","../src/providers/base.ts","../src/streaming.ts","../src/client.ts"],"sourcesContent":["export { OpenModels, client } from './client';\r\nexport { parseSSEStream, OpenModelsError } from './streaming';\r\nexport { ModalProvider } from './providers/modal';\r\nexport * from './types';\r\n","import fetch from 'node-fetch';\nimport { BaseProvider } from './base';\nimport { ChatCompletionRequest } from '../types';\n\nexport class ModalProvider extends BaseProvider {\n  async chat(request: ChatCompletionRequest): Promise<any> {\n    const url = `${this.config.baseUrl}/chat`;\n    \n    const headers: Record<string, string> = {\n      'Content-Type': 'application/json',\n    };\n    \n    if (this.config.apiKey) {\n      headers['Authorization'] = `Bearer ${this.config.apiKey}`;\n    }\n\n    const response = await fetch(url, {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(request),\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`Modal API error: ${response.status} ${errorText}`);\n    }\n\n    return response;\n  }\n}\n","import { ProviderConfig } from '../types';\n\nexport interface Provider {\n  chat(request: any): Promise<any>;\n}\n\nexport abstract class BaseProvider implements Provider {\n  constructor(protected config: ProviderConfig) {}\n  \n  abstract chat(request: any): Promise<any>;\n}\n","import { StreamChunk } from './types';\n\nexport class OpenModelsError extends Error {\n  constructor(\n    message: string,\n    public status?: number,\n    public code?: string\n  ) {\n    super(message);\n    this.name = 'OpenModelsError';\n  }\n}\n\nexport async function* parseSSEStream(\n  response: Response\n): AsyncGenerator<string, void, unknown> {\n  if (!response.body) {\n    throw new OpenModelsError('Response body is null');\n  }\n\n  const reader = response.body.getReader();\n  const decoder = new TextDecoder();\n  let buffer = '';\n\n  try {\n    while (true) {\n      const { done, value } = await reader.read();\n      \n      if (done) break;\n      \n      buffer += decoder.decode(value, { stream: true });\n      const lines = buffer.split('\\n');\n      buffer = lines.pop() || '';\n\n      for (const line of lines) {\n        const trimmed = line.trim();\n        \n        if (trimmed === '') continue;\n        if (trimmed === '[DONE]') return;\n        \n        if (trimmed.startsWith('data: ')) {\n          const data = trimmed.slice(6);\n          if (data === '[DONE]') return;\n          \n          try {\n            const parsed: StreamChunk = JSON.parse(data);\n            if (parsed.choices?.[0]?.delta?.content) {\n              yield parsed.choices[0].delta.content;\n            }\n          } catch (e) {\n            // Skip malformed JSON\n            continue;\n          }\n        }\n      }\n    }\n  } finally {\n    reader.releaseLock();\n  }\n}\n","import { ModalProvider } from './providers/modal';\r\nimport { parseSSEStream, OpenModelsError } from './streaming';\r\nimport { \r\n  OpenModelsConfig, \r\n  ChatCompletionRequest, \r\n  ChatCompletionResponse \r\n} from './types';\r\n\r\nexport class OpenModels {\r\n  private provider: ModalProvider;\r\n\r\n  constructor(config: OpenModelsConfig = {}) {\r\n    this.provider = new ModalProvider({\r\n      apiKey: config.apiKey,\r\n      baseUrl: config.baseUrl || 'https://modal.run/api/v1',\r\n    });\r\n  }\r\n\r\n  async chat(request: ChatCompletionRequest): Promise<ChatCompletionResponse | AsyncGenerator<string, void, unknown>> {\r\n    try {\r\n      const response = await this.provider.chat(request);\r\n      \r\n      if (request.stream) {\r\n        return parseSSEStream(response);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      return data as ChatCompletionResponse;\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        throw new OpenModelsError(error.message);\r\n      }\r\n      throw new OpenModelsError('Unknown error occurred');\r\n    }\r\n  }\r\n}\r\n\r\nexport function client(config?: OpenModelsConfig): OpenModels {\r\n  return new OpenModels(config);\r\n}\r\n"],"mappings":"0jBAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,mBAAAE,EAAA,eAAAC,EAAA,oBAAAC,EAAA,WAAAC,EAAA,mBAAAC,IAAA,eAAAC,EAAAP,GCAA,IAAAQ,EAAkB,yBCMX,IAAeC,EAAf,KAAgD,CACrD,YAAsBC,EAAwB,CAAxB,YAAAA,CAAyB,CAGjD,EDNO,IAAMC,EAAN,cAA4BC,CAAa,CAC9C,MAAM,KAAKC,EAA8C,CACvD,IAAMC,EAAM,GAAG,KAAK,OAAO,OAAO,QAE5BC,EAAkC,CACtC,eAAgB,kBAClB,EAEI,KAAK,OAAO,SACdA,EAAQ,cAAmB,UAAU,KAAK,OAAO,MAAM,IAGzD,IAAMC,EAAW,QAAM,EAAAC,SAAMH,EAAK,CAChC,OAAQ,OACR,QAAAC,EACA,KAAM,KAAK,UAAUF,CAAO,CAC9B,CAAC,EAED,GAAI,CAACG,EAAS,GAAI,CAChB,IAAME,EAAY,MAAMF,EAAS,KAAK,EACtC,MAAM,IAAI,MAAM,oBAAoBA,EAAS,MAAM,IAAIE,CAAS,EAAE,CACpE,CAEA,OAAOF,CACT,CACF,EE3BO,IAAMG,EAAN,cAA8B,KAAM,CACzC,YACEC,EACOC,EACAC,EACP,CACA,MAAMF,CAAO,EAHN,YAAAC,EACA,UAAAC,EAGP,KAAK,KAAO,iBACd,CACF,EAEA,eAAuBC,EACrBC,EACuC,CACvC,GAAI,CAACA,EAAS,KACZ,MAAM,IAAIL,EAAgB,uBAAuB,EAGnD,IAAMM,EAASD,EAAS,KAAK,UAAU,EACjCE,EAAU,IAAI,YAChBC,EAAS,GAEb,GAAI,CACF,OAAa,CACX,GAAM,CAAE,KAAAC,EAAM,MAAAC,CAAM,EAAI,MAAMJ,EAAO,KAAK,EAE1C,GAAIG,EAAM,MAEVD,GAAUD,EAAQ,OAAOG,EAAO,CAAE,OAAQ,EAAK,CAAC,EAChD,IAAMC,EAAQH,EAAO,MAAM;AAAA,CAAI,EAC/BA,EAASG,EAAM,IAAI,GAAK,GAExB,QAAWC,KAAQD,EAAO,CACxB,IAAME,EAAUD,EAAK,KAAK,EAE1B,GAAIC,IAAY,GAChB,IAAIA,IAAY,SAAU,OAE1B,GAAIA,EAAQ,WAAW,QAAQ,EAAG,CAChC,IAAMC,EAAOD,EAAQ,MAAM,CAAC,EAC5B,GAAIC,IAAS,SAAU,OAEvB,GAAI,CACF,IAAMC,EAAsB,KAAK,MAAMD,CAAI,EACvCC,EAAO,UAAU,CAAC,GAAG,OAAO,UAC9B,MAAMA,EAAO,QAAQ,CAAC,EAAE,MAAM,QAElC,MAAY,CAEV,QACF,CACF,EACF,CACF,CACF,QAAE,CACAT,EAAO,YAAY,CACrB,CACF,CCnDO,IAAMU,EAAN,KAAiB,CAGtB,YAAYC,EAA2B,CAAC,EAAG,CACzC,KAAK,SAAW,IAAIC,EAAc,CAChC,OAAQD,EAAO,OACf,QAASA,EAAO,SAAW,0BAC7B,CAAC,CACH,CAEA,MAAM,KAAKE,EAAyG,CAClH,GAAI,CACF,IAAMC,EAAW,MAAM,KAAK,SAAS,KAAKD,CAAO,EAEjD,OAAIA,EAAQ,OACHE,EAAeD,CAAQ,EAGnB,MAAMA,EAAS,KAAK,CAEnC,OAASE,EAAO,CACd,MAAIA,aAAiB,MACb,IAAIC,EAAgBD,EAAM,OAAO,EAEnC,IAAIC,EAAgB,wBAAwB,CACpD,CACF,CACF,EAEO,SAASC,EAAOP,EAAuC,CAC5D,OAAO,IAAID,EAAWC,CAAM,CAC9B","names":["index_exports","__export","ModalProvider","OpenModels","OpenModelsError","client","parseSSEStream","__toCommonJS","import_node_fetch","BaseProvider","config","ModalProvider","BaseProvider","request","url","headers","response","fetch","errorText","OpenModelsError","message","status","code","parseSSEStream","response","reader","decoder","buffer","done","value","lines","line","trimmed","data","parsed","OpenModels","config","ModalProvider","request","response","parseSSEStream","error","OpenModelsError","client"]}