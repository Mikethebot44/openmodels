#!/usr/bin/env node
"use strict";var H=Object.create;var M=Object.defineProperty;var X=Object.getOwnPropertyDescriptor;var Z=Object.getOwnPropertyNames;var ee=Object.getPrototypeOf,oe=Object.prototype.hasOwnProperty;var te=(s,e,t,r)=>{if(e&&typeof e=="object"||typeof e=="function")for(let o of Z(e))!oe.call(s,o)&&o!==t&&M(s,o,{get:()=>e[o],enumerable:!(r=X(e,o))||r.enumerable});return s};var c=(s,e,t)=>(t=s!=null?H(ee(s)):{},te(e||!s||!s.__esModule?M(t,"default",{value:s,enumerable:!0}):t,s));var V=require("commander");var U=require("commander");var y=c(require("node-fetch"));var x=class{constructor(e){this.config=e}};var n=class extends Error{constructor(t,r,o){super(t);this.status=r;this.code=o;this.name="OpenModelsError"}};async function*R(s){if(!s.body)throw new n("Response body is null");if(s.status===401)throw new n("Invalid API key. Please check your credentials.",401);if(s.status===403)throw new n("Insufficient credits. Please top up your account.",403);let t=(await s.text()).split(`
`);for(let r of t){let o=r.trim();if(o!==""){if(o==="[DONE]")return;if(o.startsWith("data: ")){let a=o.slice(6);if(a==="[DONE]")return;try{let i=JSON.parse(a);i.choices?.[0]?.delta?.content&&(yield i.choices[0].delta.content)}catch{continue}}}}}var p=class extends x{async chat(e){let t=`${this.config.baseUrl}/chat`,r={"Content-Type":"application/json",Authorization:`Bearer ${this.config.apiKey}`},o=await(0,y.default)(t,{method:"POST",headers:r,body:JSON.stringify(e)});if(!o.ok){let a=await o.text();throw o.status===401?new n("Invalid API key. Please check your credentials.",401):o.status===403?new n("Insufficient credits. Please top up your account.",403):new n(`Modal API error: ${o.status} ${a}`,o.status)}return o}async embed(e){let t=`${this.config.baseUrl}/embed`,r={"Content-Type":"application/json",Authorization:`Bearer ${this.config.apiKey}`},o=await(0,y.default)(t,{method:"POST",headers:r,body:JSON.stringify(e)});if(!o.ok){let a=await o.text();throw o.status===401?new n("Invalid API key. Please check your credentials.",401):o.status===403?new n("Insufficient credits. Please top up your account.",403):new n(`Modal API error: ${o.status} ${a}`,o.status)}return o}async image(e){let t=`${this.config.baseUrl}/image`,r={"Content-Type":"application/json",Authorization:`Bearer ${this.config.apiKey}`},o=await(0,y.default)(t,{method:"POST",headers:r,body:JSON.stringify(e)});if(!o.ok){let a=await o.text();throw o.status===401?new n("Invalid API key. Please check your credentials.",401):o.status===403?new n("Insufficient credits. Please top up your account.",403):new n(`Modal API error: ${o.status} ${a}`,o.status)}return o}async audioTranscribe(e){let t=`${this.config.baseUrl}/transcribe`,r={"Content-Type":"application/json",Authorization:`Bearer ${this.config.apiKey}`},o=await(0,y.default)(t,{method:"POST",headers:r,body:JSON.stringify(e)});if(!o.ok){let a=await o.text();throw o.status===401?new n("Invalid API key. Please check your credentials.",401):o.status===403?new n("Insufficient credits. Please top up your account.",403):new n(`Modal API error: ${o.status} ${a}`,o.status)}return o}async audioSummarize(e){let t=`${this.config.baseUrl}/summarize`,r={"Content-Type":"application/json",Authorization:`Bearer ${this.config.apiKey}`},o=await(0,y.default)(t,{method:"POST",headers:r,body:JSON.stringify(e)});if(!o.ok){let a=await o.text();throw o.status===401?new n("Invalid API key. Please check your credentials.",401):o.status===403?new n("Insufficient credits. Please top up your account.",403):new n(`Modal API error: ${o.status} ${a}`,o.status)}return o}async visionClassify(e){let t=`${this.config.baseUrl}/classify`,r={"Content-Type":"application/json",Authorization:`Bearer ${this.config.apiKey}`},o=await(0,y.default)(t,{method:"POST",headers:r,body:JSON.stringify(e)});if(!o.ok){let a=await o.text();throw o.status===401?new n("Invalid API key. Please check your credentials.",401):o.status===403?new n("Insufficient credits. Please top up your account.",403):new n(`Modal API error: ${o.status} ${a}`,o.status)}return o}};var re={"image-classification":["google/vit-base-patch16-224","facebook/convnext-base-224","openai/clip-vit-base-patch32"],"text-generation":["microsoft/DialoGPT-medium","meta-llama/Llama-3.1-8B-Instruct"],embedding:["sentence-transformers/all-MiniLM-L6-v2"],"audio-transcribe":["openai/whisper-base"],"audio-summarize":["facebook/bart-large-cnn"],"image-generation":["runwayml/stable-diffusion-v1-5"]};function h(s){let e=re[s];if(!e||e.length===0)throw new Error(`No default models configured for task: ${s}`);return e[0]}var I=class{constructor(e={}){if(!e.apiKey)throw new n("API key is required. Please provide an API key in the client configuration.");if(!e.apiKey.startsWith("om_")||e.apiKey.length<10)throw new n('Invalid API key format. API keys must start with "om_" and be at least 10 characters long.');let t=e.baseUrl||"https://tryscout.dev",r=o=>t.includes("modal.run")||t.includes("/api/")?t:t.includes(".")?`${t}/api/${o}`:`https://tryscout.dev/api/${o}`;this.textProvider=new p({apiKey:e.apiKey,baseUrl:r("text")}),this.embedProvider=new p({apiKey:e.apiKey,baseUrl:r("embed")}),this.imageProvider=new p({apiKey:e.apiKey,baseUrl:r("image")}),this.audioProvider=new p({apiKey:e.apiKey,baseUrl:r("audio")}),this.visionProvider=new p({apiKey:e.apiKey,baseUrl:r("vision")})}async chat(e){try{let t=await this.textProvider.chat(e);return e.stream?R(t):await t.json()}catch(t){throw t instanceof Error?new n(t.message):new n("Unknown error occurred")}}async embed(e){try{return await(await this.embedProvider.embed(e)).json()}catch(t){throw t instanceof Error?new n(t.message):new n("Unknown error occurred")}}async image(e){try{return await(await this.imageProvider.image(e)).json()}catch(t){throw t instanceof Error?new n(t.message):new n("Unknown error occurred")}}async run(e){try{switch(e.task){case"text-generation":{let t=e.model||h("text-generation"),r={...e,model:t},o=await this.textProvider.chat(r);return r.stream?R(o):await o.json()}case"image-generation":{let t=e.model||h("image-generation"),r={...e,model:t};return await(await this.imageProvider.image(r)).json()}case"embedding":{let t=e.model||h("embedding"),r={...e,model:t};return await(await this.embedProvider.embed(r)).json()}case"audio-transcribe":{let t=e.model||h("audio-transcribe"),r={...e,model:t};return await(await this.audioProvider.audioTranscribe(r)).json()}case"audio-summarize":{let t=e.model||h("audio-summarize"),r={...e,model:t};return await(await this.audioProvider.audioSummarize(r)).json()}case"image-classification":{let t=e.model||h("image-classification"),r={...e,model:t};return await(await this.visionProvider.visionClassify(r)).json()}default:throw new n("Unsupported task")}}catch(t){throw t instanceof Error?new n(t.message):new n("Unknown error occurred")}}};function b(s){return new I(s)}var d=c(require("chalk")),q=c(require("ora"));var k=c(require("fs")),E=c(require("path")),O=c(require("os"));function g(){let s=E.join(O.homedir(),".openmodels","config.json");if(!k.existsSync(s))return{baseUrl:"https://modal.run/api/v1"};try{let e=JSON.parse(k.readFileSync(s,"utf8"));return e["base-url"]&&!e.baseUrl&&(e.baseUrl=e["base-url"]),e}catch{return console.log("Warning: Could not read config file, using defaults"),{baseUrl:"https://modal.run/api/v1"}}}var z=new U.Command("chat").description("Chat with AI models").argument("[message]","Message to send to the AI").option("-m, --model <model>","Model to use","microsoft/DialoGPT-medium").option("-s, --stream","Stream the response",!1).option("-t, --temperature <temp>","Temperature for generation","0.7").option("-k, --max-tokens <tokens>","Maximum tokens to generate","200").option("-i, --interactive","Interactive chat mode",!1).action(async(s,e)=>{let t=g(),r=b(t);e.interactive?await ne(r,e):s?await se(r,s,e):(console.log(d.default.red("Error: Please provide a message or use --interactive mode")),process.exit(1))});async function se(s,e,t){let r=(0,q.default)("Generating response...").start();try{let o={model:t.model,messages:[{role:"user",content:e}],max_tokens:parseInt(t.maxTokens),temperature:parseFloat(t.temperature),stream:t.stream};if(t.stream){r.stop();let a=await s.chat(o);process.stdout.write(d.default.blue("Response: "));for await(let i of a)process.stdout.write(i);console.log()}else{let a=await s.chat(o);r.stop(),console.log(d.default.blue("Response:")),console.log(a.choices[0].message.content)}}catch(o){r.stop(),console.error(d.default.red("Error:"),o),process.exit(1)}}async function ne(s,e){console.log(d.default.green('Interactive chat mode. Type "exit" to quit.')),console.log(d.default.gray(`Using model: ${e.model}`));let r=require("readline").createInterface({input:process.stdin,output:process.stdout}),o=()=>{r.question(d.default.blue("You: "),async a=>{if(a.toLowerCase()==="exit"){r.close();return}let i=(0,q.default)("Generating response...").start();try{let f={model:e.model,messages:[{role:"user",content:a}],max_tokens:parseInt(e.maxTokens),temperature:parseFloat(e.temperature),stream:!1},A=await s.chat(f);i.stop(),console.log(d.default.green("AI:"),A.choices[0].message.content),console.log(),o()}catch(f){i.stop(),console.error(d.default.red("Error:"),f),o()}})};o()}var j=require("commander");var v=c(require("chalk")),K=c(require("ora"));var G=new j.Command("embed").description("Generate text embeddings").argument("<text>","Text to embed").option("-m, --model <model>","Embedding model to use","sentence-transformers/all-MiniLM-L6-v2").option("-f, --format <format>","Output format (json, values)","json").option("-u, --url <url>","Custom embedding backend URL").action(async(s,e)=>{let t=g(),r=e.url||t.embedUrl||t.baseUrl,o=b({baseUrl:r}),a=(0,K.default)("Generating embedding...").start();try{let i=await o.embed({model:e.model,input:s});a.stop(),e.format==="values"?(console.log(v.default.blue("Embedding values:")),console.log(i.data[0].embedding.slice(0,10).map(f=>f.toFixed(4)).join(", ")),console.log(v.default.gray(`... (${i.data[0].embedding.length} dimensions)`))):(console.log(v.default.blue("Embedding response:")),console.log(JSON.stringify(i,null,2)))}catch(i){a.stop(),console.error(v.default.red("Error:"),i),process.exit(1)}});var L=require("commander");var P=c(require("chalk")),N=c(require("ora")),D=c(require("fs")),B=c(require("path"));var J=new L.Command("image").description("Generate images from text prompts").argument("<prompt>","Text prompt for image generation").option("-m, --model <model>","Image model to use","stabilityai/stable-diffusion-xl-base-1.0").option("-s, --size <size>","Image size","1024x1024").option("-q, --quality <quality>","Image quality (standard, hd)","standard").option("-n, --number <number>","Number of images to generate","1").option("-o, --output <file>","Output file path").option("-u, --url <url>","Custom image backend URL").action(async(s,e)=>{let t=g(),r=e.url||t.imageUrl||t.baseUrl,o=b({baseUrl:r}),a=(0,N.default)("Generating image...").start();try{let i=await o.image({model:e.model,prompt:s,size:e.size,quality:e.quality,n:parseInt(e.number)});a.stop();let f=i.data[0];if(f.b64_json){let A=Buffer.from(f.b64_json,"base64"),Y=e.output||`generated_image_${Date.now()}.png`,T=B.resolve(Y);D.writeFileSync(T,A),console.log(P.default.green("\u2713 Image generated successfully!")),console.log(P.default.blue("Saved to:"),T),console.log(P.default.gray(`Model: ${i.model}`)),console.log(P.default.gray(`Size: ${e.size}`))}}catch(i){a.stop(),console.error(P.default.red("Error:"),i),process.exit(1)}});var _=require("commander"),m=c(require("chalk"));var F=new _.Command("models").description("List available models").option("-t, --type <type>","Filter by model type (text, embed, image)","all").action(async s=>{let e=g(),t={text:["microsoft/DialoGPT-medium","microsoft/DialoGPT-large","facebook/blenderbot-400M-distill","EleutherAI/gpt-neo-2.7B","EleutherAI/gpt-j-6B","microsoft/DialoGPT-small","distilgpt2"],embed:["sentence-transformers/all-MiniLM-L6-v2","sentence-transformers/all-mpnet-base-v2","BAAI/bge-large-en","BAAI/bge-base-en","sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2","sentence-transformers/all-MiniLM-L12-v2"],image:["stabilityai/stable-diffusion-xl-base-1.0","runwayml/stable-diffusion-v1-5","stabilityai/stable-diffusion-2-1","CompVis/stable-diffusion-v1-4"]};s.type==="all"?(console.log(m.default.blue("Available Models:")),console.log(),console.log(m.default.green("Text Generation Models:")),t.text.forEach(r=>{console.log(`  ${m.default.cyan("\u2022")} ${r}`)}),console.log(),console.log(m.default.green("Embedding Models:")),t.embed.forEach(r=>{console.log(`  ${m.default.cyan("\u2022")} ${r}`)}),console.log(),console.log(m.default.green("Image Generation Models:")),t.image.forEach(r=>{console.log(`  ${m.default.cyan("\u2022")} ${r}`)})):t[s.type]?(console.log(m.default.blue(`${s.type.charAt(0).toUpperCase()+s.type.slice(1)} Models:`)),t[s.type].forEach(r=>{console.log(`  ${m.default.cyan("\u2022")} ${r}`)})):(console.log(m.default.red("Error: Invalid model type. Use: text, embed, image, or all")),process.exit(1))});var W=require("commander"),u=c(require("chalk")),l=c(require("fs")),C=c(require("path")),$=c(require("os")),S=new W.Command("config").description("Manage OpenModels configuration").command("set").description("Set configuration values").argument("<key>","Configuration key (api-key, base-url, embed-url, image-url)").argument("<value>","Configuration value").action(async(s,e)=>{let t=C.join($.homedir(),".openmodels","config.json"),r=C.dirname(t);l.existsSync(r)||l.mkdirSync(r,{recursive:!0});let o={};if(l.existsSync(t))try{o=JSON.parse(l.readFileSync(t,"utf8"))}catch{console.log(u.default.yellow("Warning: Could not read existing config, creating new one"))}o[s]=e,l.writeFileSync(t,JSON.stringify(o,null,2)),console.log(u.default.green(`\u2713 Set ${s} = ${e}`))});S.command("get").description("Get configuration values").argument("[key]","Configuration key to get (optional)").action(async s=>{let e=Q();s?e[s]?console.log(u.default.blue(`${s}:`),e[s]):(console.log(u.default.red(`Configuration key '${s}' not found`)),process.exit(1)):(console.log(u.default.blue("Current configuration:")),Object.entries(e).forEach(([t,r])=>{console.log(`  ${u.default.cyan(t)}: ${r}`)}))});S.command("list").description("List all configuration values").action(async()=>{let s=Q();console.log(u.default.blue("Current configuration:")),Object.entries(s).forEach(([e,t])=>{console.log(`  ${u.default.cyan(e)}: ${t}`)})});function Q(){let s=C.join($.homedir(),".openmodels","config.json");if(!l.existsSync(s))return{baseUrl:"https://modal.run/api/v1"};try{return JSON.parse(l.readFileSync(s,"utf8"))}catch{return console.log(u.default.yellow("Warning: Could not read config file, using defaults")),{baseUrl:"https://modal.run/api/v1"}}}var w=new V.Command;w.name("openmodels").description("CLI for OpenModels - Open-source AI models SDK").version("0.3.0");w.addCommand(z);w.addCommand(G);w.addCommand(J);w.addCommand(F);w.addCommand(S);w.parse();
//# sourceMappingURL=index.js.map