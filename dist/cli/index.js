#!/usr/bin/env node
"use strict";var Y=Object.create;var q=Object.defineProperty;var H=Object.getOwnPropertyDescriptor;var X=Object.getOwnPropertyNames;var Z=Object.getPrototypeOf,ee=Object.prototype.hasOwnProperty;var oe=(t,e,o,r)=>{if(e&&typeof e=="object"||typeof e=="function")for(let n of X(e))!ee.call(t,n)&&n!==o&&q(t,n,{get:()=>e[n],enumerable:!(r=H(e,n))||r.enumerable});return t};var i=(t,e,o)=>(o=t!=null?Y(Z(t)):{},oe(e||!t||!t.__esModule?q(o,"default",{value:t,enumerable:!0}):o,t));var Q=require("commander");var A=require("commander");var v=i(require("node-fetch"));var x=class{constructor(e){this.config=e}};var b=class extends x{async chat(e){let o=`${this.config.baseUrl}/chat`,r={"Content-Type":"application/json"};this.config.apiKey&&(r.Authorization=`Bearer ${this.config.apiKey}`);let n=await(0,v.default)(o,{method:"POST",headers:r,body:JSON.stringify(e)});if(!n.ok){let s=await n.text();throw new Error(`Modal API error: ${n.status} ${s}`)}return n}async embed(e){let o=`${this.config.baseUrl}/embed`,r={"Content-Type":"application/json"};this.config.apiKey&&(r.Authorization=`Bearer ${this.config.apiKey}`);let n=await(0,v.default)(o,{method:"POST",headers:r,body:JSON.stringify(e)});if(!n.ok){let s=await n.text();throw new Error(`Modal API error: ${n.status} ${s}`)}return n}async image(e){let o=`${this.config.baseUrl}/image`,r={"Content-Type":"application/json"};this.config.apiKey&&(r.Authorization=`Bearer ${this.config.apiKey}`);let n=await(0,v.default)(o,{method:"POST",headers:r,body:JSON.stringify(e)});if(!n.ok){let s=await n.text();throw new Error(`Modal API error: ${n.status} ${s}`)}return n}};var m=class extends Error{constructor(o,r,n){super(o);this.status=r;this.code=n;this.name="OpenModelsError"}};async function*M(t){if(!t.body)throw new m("Response body is null");let o=(await t.text()).split(`
`);for(let r of o){let n=r.trim();if(n!==""){if(n==="[DONE]")return;if(n.startsWith("data: ")){let s=n.slice(6);if(s==="[DONE]")return;try{let a=JSON.parse(s);a.choices?.[0]?.delta?.content&&(yield a.choices[0].delta.content)}catch{continue}}}}}var E=class{constructor(e={}){this.provider=new b({apiKey:e.apiKey,baseUrl:e.baseUrl||"https://modal.run/api/v1"})}async chat(e){try{let o=await this.provider.chat(e);return e.stream?M(o):await o.json()}catch(o){throw o instanceof Error?new m(o.message):new m("Unknown error occurred")}}async embed(e){try{return await(await this.provider.embed(e)).json()}catch(o){throw o instanceof Error?new m(o.message):new m("Unknown error occurred")}}async image(e){try{return await(await this.provider.image(e)).json()}catch(o){throw o instanceof Error?new m(o.message):new m("Unknown error occurred")}}};function u(t){return new E(t)}var d=i(require("chalk")),P=i(require("ora"));var S=i(require("fs")),O=i(require("path")),U=i(require("os"));function g(){let t=O.join(U.homedir(),".openmodels","config.json");if(!S.existsSync(t))return{baseUrl:"https://modal.run/api/v1"};try{let e=JSON.parse(S.readFileSync(t,"utf8"));return e["base-url"]&&!e.baseUrl&&(e.baseUrl=e["base-url"]),e}catch{return console.log("Warning: Could not read config file, using defaults"),{baseUrl:"https://modal.run/api/v1"}}}var j=new A.Command("chat").description("Chat with AI models").argument("[message]","Message to send to the AI").option("-m, --model <model>","Model to use","microsoft/DialoGPT-medium").option("-s, --stream","Stream the response",!1).option("-t, --temperature <temp>","Temperature for generation","0.7").option("-k, --max-tokens <tokens>","Maximum tokens to generate","200").option("-i, --interactive","Interactive chat mode",!1).action(async(t,e)=>{let o=g(),r=u(o);e.interactive?await re(r,e):t?await te(r,t,e):(console.log(d.default.red("Error: Please provide a message or use --interactive mode")),process.exit(1))});async function te(t,e,o){let r=(0,P.default)("Generating response...").start();try{let n={model:o.model,messages:[{role:"user",content:e}],max_tokens:parseInt(o.maxTokens),temperature:parseFloat(o.temperature),stream:o.stream};if(o.stream){r.stop();let s=await t.chat(n);process.stdout.write(d.default.blue("Response: "));for await(let a of s)process.stdout.write(a);console.log()}else{let s=await t.chat(n);r.stop(),console.log(d.default.blue("Response:")),console.log(s.choices[0].message.content)}}catch(n){r.stop(),console.error(d.default.red("Error:"),n),process.exit(1)}}async function re(t,e){console.log(d.default.green('Interactive chat mode. Type "exit" to quit.')),console.log(d.default.gray(`Using model: ${e.model}`));let r=require("readline").createInterface({input:process.stdin,output:process.stdout}),n=()=>{r.question(d.default.blue("You: "),async s=>{if(s.toLowerCase()==="exit"){r.close();return}let a=(0,P.default)("Generating response...").start();try{let f={model:e.model,messages:[{role:"user",content:s}],max_tokens:parseInt(e.maxTokens),temperature:parseFloat(e.temperature),stream:!1},k=await t.chat(f);a.stop(),console.log(d.default.green("AI:"),k.choices[0].message.content),console.log(),n()}catch(f){a.stop(),console.error(d.default.red("Error:"),f),n()}})};n()}var T=require("commander");var C=i(require("chalk")),G=i(require("ora"));var L=new T.Command("embed").description("Generate text embeddings").argument("<text>","Text to embed").option("-m, --model <model>","Embedding model to use","sentence-transformers/all-MiniLM-L6-v2").option("-f, --format <format>","Output format (json, values)","json").option("-u, --url <url>","Custom embedding backend URL").action(async(t,e)=>{let o=g(),r=e.url||o.embedUrl||o.baseUrl,n=u({baseUrl:r}),s=(0,G.default)("Generating embedding...").start();try{let a=await n.embed({model:e.model,input:t});s.stop(),e.format==="values"?(console.log(C.default.blue("Embedding values:")),console.log(a.data[0].embedding.slice(0,10).map(f=>f.toFixed(4)).join(", ")),console.log(C.default.gray(`... (${a.data[0].embedding.length} dimensions)`))):(console.log(C.default.blue("Embedding response:")),console.log(JSON.stringify(a,null,2)))}catch(a){s.stop(),console.error(C.default.red("Error:"),a),process.exit(1)}});var N=require("commander");var h=i(require("chalk")),z=i(require("ora")),D=i(require("fs")),B=i(require("path"));var F=new N.Command("image").description("Generate images from text prompts").argument("<prompt>","Text prompt for image generation").option("-m, --model <model>","Image model to use","stabilityai/stable-diffusion-xl-base-1.0").option("-s, --size <size>","Image size","1024x1024").option("-q, --quality <quality>","Image quality (standard, hd)","standard").option("-n, --number <number>","Number of images to generate","1").option("-o, --output <file>","Output file path").option("-u, --url <url>","Custom image backend URL").action(async(t,e)=>{let o=g(),r=e.url||o.imageUrl||o.baseUrl,n=u({baseUrl:r}),s=(0,z.default)("Generating image...").start();try{let a=await n.image({model:e.model,prompt:t,size:e.size,quality:e.quality,n:parseInt(e.number)});s.stop();let f=a.data[0];if(f.b64_json){let k=Buffer.from(f.b64_json,"base64"),V=e.output||`generated_image_${Date.now()}.png`,R=B.resolve(V);D.writeFileSync(R,k),console.log(h.default.green("\u2713 Image generated successfully!")),console.log(h.default.blue("Saved to:"),R),console.log(h.default.gray(`Model: ${a.model}`)),console.log(h.default.gray(`Size: ${e.size}`))}}catch(a){s.stop(),console.error(h.default.red("Error:"),a),process.exit(1)}});var J=require("commander"),c=i(require("chalk"));var K=new J.Command("models").description("List available models").option("-t, --type <type>","Filter by model type (text, embed, image)","all").action(async t=>{let e=g(),o={text:["microsoft/DialoGPT-medium","microsoft/DialoGPT-large","facebook/blenderbot-400M-distill","EleutherAI/gpt-neo-2.7B","EleutherAI/gpt-j-6B","microsoft/DialoGPT-small","distilgpt2"],embed:["sentence-transformers/all-MiniLM-L6-v2","sentence-transformers/all-mpnet-base-v2","BAAI/bge-large-en","BAAI/bge-base-en","sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2","sentence-transformers/all-MiniLM-L12-v2"],image:["stabilityai/stable-diffusion-xl-base-1.0","runwayml/stable-diffusion-v1-5","stabilityai/stable-diffusion-2-1","CompVis/stable-diffusion-v1-4"]};t.type==="all"?(console.log(c.default.blue("Available Models:")),console.log(),console.log(c.default.green("Text Generation Models:")),o.text.forEach(r=>{console.log(`  ${c.default.cyan("\u2022")} ${r}`)}),console.log(),console.log(c.default.green("Embedding Models:")),o.embed.forEach(r=>{console.log(`  ${c.default.cyan("\u2022")} ${r}`)}),console.log(),console.log(c.default.green("Image Generation Models:")),o.image.forEach(r=>{console.log(`  ${c.default.cyan("\u2022")} ${r}`)})):o[t.type]?(console.log(c.default.blue(`${t.type.charAt(0).toUpperCase()+t.type.slice(1)} Models:`)),o[t.type].forEach(r=>{console.log(`  ${c.default.cyan("\u2022")} ${r}`)})):(console.log(c.default.red("Error: Invalid model type. Use: text, embed, image, or all")),process.exit(1))});var _=require("commander"),p=i(require("chalk")),l=i(require("fs")),w=i(require("path")),I=i(require("os")),$=new _.Command("config").description("Manage OpenModels configuration").command("set").description("Set configuration values").argument("<key>","Configuration key (api-key, base-url, embed-url, image-url)").argument("<value>","Configuration value").action(async(t,e)=>{let o=w.join(I.homedir(),".openmodels","config.json"),r=w.dirname(o);l.existsSync(r)||l.mkdirSync(r,{recursive:!0});let n={};if(l.existsSync(o))try{n=JSON.parse(l.readFileSync(o,"utf8"))}catch{console.log(p.default.yellow("Warning: Could not read existing config, creating new one"))}n[t]=e,l.writeFileSync(o,JSON.stringify(n,null,2)),console.log(p.default.green(`\u2713 Set ${t} = ${e}`))});$.command("get").description("Get configuration values").argument("[key]","Configuration key to get (optional)").action(async t=>{let e=W();t?e[t]?console.log(p.default.blue(`${t}:`),e[t]):(console.log(p.default.red(`Configuration key '${t}' not found`)),process.exit(1)):(console.log(p.default.blue("Current configuration:")),Object.entries(e).forEach(([o,r])=>{console.log(`  ${p.default.cyan(o)}: ${r}`)}))});$.command("list").description("List all configuration values").action(async()=>{let t=W();console.log(p.default.blue("Current configuration:")),Object.entries(t).forEach(([e,o])=>{console.log(`  ${p.default.cyan(e)}: ${o}`)})});function W(){let t=w.join(I.homedir(),".openmodels","config.json");if(!l.existsSync(t))return{baseUrl:"https://modal.run/api/v1"};try{return JSON.parse(l.readFileSync(t,"utf8"))}catch{return console.log(p.default.yellow("Warning: Could not read config file, using defaults")),{baseUrl:"https://modal.run/api/v1"}}}var y=new Q.Command;y.name("openmodels").description("CLI for OpenModels - Open-source AI models SDK").version("0.3.0");y.addCommand(j);y.addCommand(L);y.addCommand(F);y.addCommand(K);y.addCommand($);y.parse();
//# sourceMappingURL=index.js.map