#!/usr/bin/env node
"use strict";var X=Object.create;var q=Object.defineProperty;var Y=Object.getOwnPropertyDescriptor;var Z=Object.getOwnPropertyNames;var ee=Object.getPrototypeOf,te=Object.prototype.hasOwnProperty;var oe=(r,e,o,s)=>{if(e&&typeof e=="object"||typeof e=="function")for(let t of Z(e))!te.call(r,t)&&t!==o&&q(r,t,{get:()=>e[t],enumerable:!(s=Y(e,t))||s.enumerable});return r};var p=(r,e,o)=>(o=r!=null?X(ee(r)):{},oe(e||!r||!r.__esModule?q(o,"default",{value:r,enumerable:!0}):o,r));var V=require("commander");var O=require("commander");var y=p(require("node-fetch"));var C=class{constructor(e){this.config=e}};var a=class extends Error{constructor(o,s,t){super(o);this.status=s;this.code=t;this.name="OpenModelsError"}};async function*v(r){if(!r.body)throw new a("Response body is null");if(r.status===401)throw new a("Invalid API key. Please check your credentials.",401);if(r.status===403)throw new a("Insufficient credits. Please top up your account.",403);let o=(await r.text()).split(`
`);for(let s of o){let t=s.trim();if(t!==""){if(t==="[DONE]")return;if(t.startsWith("data: ")){let n=t.slice(6);if(n==="[DONE]")return;try{let i=JSON.parse(n);i.choices?.[0]?.delta?.content&&(yield i.choices[0].delta.content)}catch{continue}}}}}var d=class extends C{async chat(e){let o=`${this.config.baseUrl}/chat`,s={"Content-Type":"application/json",Authorization:`Bearer ${this.config.apiKey}`},t=await(0,y.default)(o,{method:"POST",headers:s,body:JSON.stringify(e)});if(!t.ok){let n=await t.text();throw t.status===401?new a("Invalid API key. Please check your credentials.",401):t.status===403?new a("Insufficient credits. Please top up your account.",403):new a(`Modal API error: ${t.status} ${n}`,t.status)}return t}async embed(e){let o=`${this.config.baseUrl}/embed`,s={"Content-Type":"application/json",Authorization:`Bearer ${this.config.apiKey}`},t=await(0,y.default)(o,{method:"POST",headers:s,body:JSON.stringify(e)});if(!t.ok){let n=await t.text();throw t.status===401?new a("Invalid API key. Please check your credentials.",401):t.status===403?new a("Insufficient credits. Please top up your account.",403):new a(`Modal API error: ${t.status} ${n}`,t.status)}return t}async image(e){let o=`${this.config.baseUrl}/image`,s={"Content-Type":"application/json",Authorization:`Bearer ${this.config.apiKey}`},t=await(0,y.default)(o,{method:"POST",headers:s,body:JSON.stringify(e)});if(!t.ok){let n=await t.text();throw t.status===401?new a("Invalid API key. Please check your credentials.",401):t.status===403?new a("Insufficient credits. Please top up your account.",403):new a(`Modal API error: ${t.status} ${n}`,t.status)}return t}async audioTranscribe(e){let o=`${this.config.baseUrl}/transcribe`,s={"Content-Type":"application/json",Authorization:`Bearer ${this.config.apiKey}`},t=await(0,y.default)(o,{method:"POST",headers:s,body:JSON.stringify(e)});if(!t.ok){let n=await t.text();throw t.status===401?new a("Invalid API key. Please check your credentials.",401):t.status===403?new a("Insufficient credits. Please top up your account.",403):new a(`Modal API error: ${t.status} ${n}`,t.status)}return t}async audioSummarize(e){let o=`${this.config.baseUrl}/summarize`,s={"Content-Type":"application/json",Authorization:`Bearer ${this.config.apiKey}`},t=await(0,y.default)(o,{method:"POST",headers:s,body:JSON.stringify(e)});if(!t.ok){let n=await t.text();throw t.status===401?new a("Invalid API key. Please check your credentials.",401):t.status===403?new a("Insufficient credits. Please top up your account.",403):new a(`Modal API error: ${t.status} ${n}`,t.status)}return t}async visionClassify(e){let o=`${this.config.baseUrl}/classify`,s={"Content-Type":"application/json",Authorization:`Bearer ${this.config.apiKey}`},t=await(0,y.default)(o,{method:"POST",headers:s,body:JSON.stringify(e)});if(!t.ok){let n=await t.text();throw t.status===401?new a("Invalid API key. Please check your credentials.",401):t.status===403?new a("Insufficient credits. Please top up your account.",403):new a(`Modal API error: ${t.status} ${n}`,t.status)}return t}};var se={"image-classification":["google/vit-base-patch16-224","facebook/convnext-base-224","openai/clip-vit-base-patch32"],"text-generation":["microsoft/DialoGPT-medium","meta-llama/Llama-3.1-8B-Instruct","meta-llama/Meta-Llama-3-8B-Instruct"],embedding:["sentence-transformers/all-MiniLM-L6-v2"],"audio-transcribe":["openai/whisper-base"],"audio-summarize":["facebook/bart-large-cnn"],"image-generation":["runwayml/stable-diffusion-v1-5"]};function b(r){let e=se[r];if(!e||e.length===0)throw new Error(`No default models configured for task: ${r}`);return e[0]}var S=class{constructor(e={}){if(!e.apiKey)throw new a("API key is required. Please provide an API key in the client configuration.");if(!e.apiKey.startsWith("om_")||e.apiKey.length<10)throw new a('Invalid API key format. API keys must start with "om_" and be at least 10 characters long.');let o=e.baseUrl||"https://tryscout.dev",s=t=>o.includes("modal.run")||o.includes("/api/")?o:o.includes(".")?`${o}/api/${t}`:`https://tryscout.dev/api/${t}`;this.textProvider=new d({apiKey:e.apiKey,baseUrl:s("text")}),this.embedProvider=new d({apiKey:e.apiKey,baseUrl:s("embed")}),this.imageProvider=new d({apiKey:e.apiKey,baseUrl:s("image")}),this.audioProvider=new d({apiKey:e.apiKey,baseUrl:s("audio")}),this.visionProvider=new d({apiKey:e.apiKey,baseUrl:s("vision")})}async chat(e){try{let o=await this.textProvider.chat(e);return e.stream?v(o):await o.json()}catch(o){throw o instanceof Error?new a(o.message):new a("Unknown error occurred")}}async embed(e){try{return await(await this.embedProvider.embed(e)).json()}catch(o){throw o instanceof Error?new a(o.message):new a("Unknown error occurred")}}async image(e){try{return await(await this.imageProvider.image(e)).json()}catch(o){throw o instanceof Error?new a(o.message):new a("Unknown error occurred")}}async run(e){try{switch(e.task){case"text-generation":{let o=e.model||b("text-generation"),s={...e,model:o},t=await this.textProvider.chat(s);return s.stream?v(t):await t.json()}case"image-generation":{let o=e.model||b("image-generation"),s={...e,model:o};return await(await this.imageProvider.image(s)).json()}case"embedding":{let o=e.model||b("embedding"),s={...e,model:o};return await(await this.embedProvider.embed(s)).json()}case"audio-transcribe":{let o=e.model||b("audio-transcribe"),s={...e,model:o};return await(await this.audioProvider.audioTranscribe(s)).json()}case"audio-summarize":{let o=e.model||b("audio-summarize"),s={...e,model:o};return await(await this.audioProvider.audioSummarize(s)).json()}case"image-classification":{let o=e.model||b("image-classification"),s={...e,model:o};return await(await this.visionProvider.visionClassify(s)).json()}default:throw new a("Unsupported task")}}catch(o){throw o instanceof Error?new a(o.message):new a("Unknown error occurred")}}};function h(r){return new S(r)}var m=p(require("chalk")),R=p(require("ora"));var I=p(require("fs")),E=p(require("path")),$=p(require("os"));function g(){let r=E.join($.homedir(),".openmodels","config.json");if(!I.existsSync(r))return{baseUrl:"https://modal.run/api/v1"};try{let e=JSON.parse(I.readFileSync(r,"utf8"));return e["base-url"]&&!e.baseUrl&&(e.baseUrl=e["base-url"]),e}catch{return console.log("Warning: Could not read config file, using defaults"),{baseUrl:"https://modal.run/api/v1"}}}var L=new O.Command("chat").description("Chat with AI models").argument("[message]","Message to send to the AI").option("-m, --model <model>","Model to use","microsoft/DialoGPT-medium").option("-s, --stream","Stream the response",!1).option("-t, --temperature <temp>","Temperature for generation","0.7").option("-k, --max-tokens <tokens>","Maximum tokens to generate","200").option("-i, --interactive","Interactive chat mode",!1).action(async(r,e)=>{let o=g(),s=h(o);e.interactive?await ae(s,e):r?await re(s,r,e):(console.log(m.default.red("Error: Please provide a message or use --interactive mode")),process.exit(1))});async function re(r,e,o){let s=(0,R.default)("Generating response...").start();try{let t={model:o.model,messages:[{role:"user",content:e}],max_tokens:parseInt(o.maxTokens),temperature:parseFloat(o.temperature),stream:o.stream};if(o.stream){s.stop();let n=await r.chat(t);process.stdout.write(m.default.blue("Response: "));for await(let i of n)process.stdout.write(i);console.log()}else{let n=await r.chat(t);s.stop(),console.log(m.default.blue("Response:")),console.log(n.choices[0].message.content)}}catch(t){s.stop(),console.error(m.default.red("Error:"),t),process.exit(1)}}async function ae(r,e){console.log(m.default.green('Interactive chat mode. Type "exit" to quit.')),console.log(m.default.gray(`Using model: ${e.model}`));let s=require("readline").createInterface({input:process.stdin,output:process.stdout}),t=()=>{s.question(m.default.blue("You: "),async n=>{if(n.toLowerCase()==="exit"){s.close();return}let i=(0,R.default)("Generating response...").start();try{let f={model:e.model,messages:[{role:"user",content:n}],max_tokens:parseInt(e.maxTokens),temperature:parseFloat(e.temperature),stream:!1},M=await r.chat(f);i.stop(),console.log(m.default.green("AI:"),M.choices[0].message.content),console.log(),t()}catch(f){i.stop(),console.error(m.default.red("Error:"),f),t()}})};t()}var U=require("commander");var P=p(require("chalk")),Q=p(require("ora"));var j=new U.Command("embed").description("Generate text embeddings").argument("<text>","Text to embed").option("-m, --model <model>","Embedding model to use","sentence-transformers/all-MiniLM-L6-v2").option("-f, --format <format>","Output format (json, values)","json").option("-u, --url <url>","Custom embedding backend URL").action(async(r,e)=>{let o=g(),s=e.url||o.embedUrl||o.baseUrl,t=h({baseUrl:s}),n=(0,Q.default)("Generating embedding...").start();try{let i=await t.embed({model:e.model,input:r});n.stop(),e.format==="values"?(console.log(P.default.blue("Embedding values:")),console.log(i.data[0].embedding.slice(0,10).map(f=>f.toFixed(4)).join(", ")),console.log(P.default.gray(`... (${i.data[0].embedding.length} dimensions)`))):(console.log(P.default.blue("Embedding response:")),console.log(JSON.stringify(i,null,2)))}catch(i){n.stop(),console.error(P.default.red("Error:"),i),process.exit(1)}});var B=require("commander");var x=p(require("chalk")),D=p(require("ora")),G=p(require("fs")),K=p(require("path"));var _=new B.Command("image").description("Generate images from text prompts").argument("<prompt>","Text prompt for image generation").option("-m, --model <model>","Image model to use","stabilityai/stable-diffusion-xl-base-1.0").option("-s, --size <size>","Image size","1024x1024").option("-q, --quality <quality>","Image quality (standard, hd)","standard").option("-n, --number <number>","Number of images to generate","1").option("-o, --output <file>","Output file path").option("-u, --url <url>","Custom image backend URL").action(async(r,e)=>{let o=g(),s=e.url||o.imageUrl||o.baseUrl,t=h({baseUrl:s}),n=(0,D.default)("Generating image...").start();try{let i=await t.image({model:e.model,prompt:r,size:e.size,quality:e.quality,n:parseInt(e.number)});n.stop();let f=i.data[0];if(f.b64_json){let M=Buffer.from(f.b64_json,"base64"),H=e.output||`generated_image_${Date.now()}.png`,z=K.resolve(H);G.writeFileSync(z,M),console.log(x.default.green("\u2713 Image generated successfully!")),console.log(x.default.blue("Saved to:"),z),console.log(x.default.gray(`Model: ${i.model}`)),console.log(x.default.gray(`Size: ${e.size}`))}}catch(i){n.stop(),console.error(x.default.red("Error:"),i),process.exit(1)}});var N=require("commander"),u=p(require("chalk"));var J=new N.Command("models").description("List available models").option("-t, --type <type>","Filter by model type (text, embed, image)","all").action(async r=>{let e=g(),o={text:["microsoft/DialoGPT-medium","microsoft/DialoGPT-large","facebook/blenderbot-400M-distill","EleutherAI/gpt-neo-2.7B","EleutherAI/gpt-j-6B","microsoft/DialoGPT-small","distilgpt2"],embed:["sentence-transformers/all-MiniLM-L6-v2","sentence-transformers/all-mpnet-base-v2","BAAI/bge-large-en","BAAI/bge-base-en","sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2","sentence-transformers/all-MiniLM-L12-v2"],image:["stabilityai/stable-diffusion-xl-base-1.0","runwayml/stable-diffusion-v1-5","stabilityai/stable-diffusion-2-1","CompVis/stable-diffusion-v1-4"]};r.type==="all"?(console.log(u.default.blue("Available Models:")),console.log(),console.log(u.default.green("Text Generation Models:")),o.text.forEach(s=>{console.log(`  ${u.default.cyan("\u2022")} ${s}`)}),console.log(),console.log(u.default.green("Embedding Models:")),o.embed.forEach(s=>{console.log(`  ${u.default.cyan("\u2022")} ${s}`)}),console.log(),console.log(u.default.green("Image Generation Models:")),o.image.forEach(s=>{console.log(`  ${u.default.cyan("\u2022")} ${s}`)})):o[r.type]?(console.log(u.default.blue(`${r.type.charAt(0).toUpperCase()+r.type.slice(1)} Models:`)),o[r.type].forEach(s=>{console.log(`  ${u.default.cyan("\u2022")} ${s}`)})):(console.log(u.default.red("Error: Invalid model type. Use: text, embed, image, or all")),process.exit(1))});var F=require("commander"),c=p(require("chalk")),l=p(require("fs")),T=p(require("path")),A=p(require("os")),k=new F.Command("config").description("Manage OpenModels configuration").command("set").description("Set configuration values").argument("<key>","Configuration key (api-key, base-url, embed-url, image-url)").argument("<value>","Configuration value").action(async(r,e)=>{let o=T.join(A.homedir(),".openmodels","config.json"),s=T.dirname(o);l.existsSync(s)||l.mkdirSync(s,{recursive:!0});let t={};if(l.existsSync(o))try{t=JSON.parse(l.readFileSync(o,"utf8"))}catch{console.log(c.default.yellow("Warning: Could not read existing config, creating new one"))}t[r]=e,l.writeFileSync(o,JSON.stringify(t,null,2)),console.log(c.default.green(`\u2713 Set ${r} = ${e}`))});k.command("get").description("Get configuration values").argument("[key]","Configuration key to get (optional)").action(async r=>{let e=W();r?e[r]?console.log(c.default.blue(`${r}:`),e[r]):(console.log(c.default.red(`Configuration key '${r}' not found`)),process.exit(1)):(console.log(c.default.blue("Current configuration:")),Object.entries(e).forEach(([o,s])=>{console.log(`  ${c.default.cyan(o)}: ${s}`)}))});k.command("list").description("List all configuration values").action(async()=>{let r=W();console.log(c.default.blue("Current configuration:")),Object.entries(r).forEach(([e,o])=>{console.log(`  ${c.default.cyan(e)}: ${o}`)})});function W(){let r=T.join(A.homedir(),".openmodels","config.json");if(!l.existsSync(r))return{baseUrl:"https://modal.run/api/v1"};try{return JSON.parse(l.readFileSync(r,"utf8"))}catch{return console.log(c.default.yellow("Warning: Could not read config file, using defaults")),{baseUrl:"https://modal.run/api/v1"}}}var w=new V.Command;w.name("openmodels").description("CLI for OpenModels - Open-source AI models SDK").version("0.3.0");w.addCommand(L);w.addCommand(j);w.addCommand(_);w.addCommand(J);w.addCommand(k);w.parse();
//# sourceMappingURL=index.js.map