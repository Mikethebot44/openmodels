#!/usr/bin/env node
"use strict";var Y=Object.create;var A=Object.defineProperty;var H=Object.getOwnPropertyDescriptor;var X=Object.getOwnPropertyNames;var Z=Object.getPrototypeOf,ee=Object.prototype.hasOwnProperty;var oe=(t,e,o,n)=>{if(e&&typeof e=="object"||typeof e=="function")for(let r of X(e))!ee.call(t,r)&&r!==o&&A(t,r,{get:()=>e[r],enumerable:!(n=H(e,r))||n.enumerable});return t};var m=(t,e,o)=>(o=t!=null?Y(Z(t)):{},oe(e||!t||!t.__esModule?A(o,"default",{value:t,enumerable:!0}):o,t));var Q=require("commander");var O=require("commander");var v=m(require("node-fetch"));var C=class{constructor(e){this.config=e}};var s=class extends Error{constructor(o,n,r){super(o);this.status=n;this.code=r;this.name="OpenModelsError"}};async function*E(t){if(!t.body)throw new s("Response body is null");if(t.status===401)throw new s("Invalid API key. Please check your credentials.",401);if(t.status===403)throw new s("Insufficient credits. Please top up your account.",403);let o=(await t.text()).split(`
`);for(let n of o){let r=n.trim();if(r!==""){if(r==="[DONE]")return;if(r.startsWith("data: ")){let a=r.slice(6);if(a==="[DONE]")return;try{let i=JSON.parse(a);i.choices?.[0]?.delta?.content&&(yield i.choices[0].delta.content)}catch{continue}}}}}var g=class extends C{async chat(e){let o=`${this.config.baseUrl}/chat`,n={"Content-Type":"application/json",Authorization:`Bearer ${this.config.apiKey}`},r=await(0,v.default)(o,{method:"POST",headers:n,body:JSON.stringify(e)});if(!r.ok){let a=await r.text();throw r.status===401?new s("Invalid API key. Please check your credentials.",401):r.status===403?new s("Insufficient credits. Please top up your account.",403):new s(`Modal API error: ${r.status} ${a}`,r.status)}return r}async embed(e){let o=`${this.config.baseUrl}/embed`,n={"Content-Type":"application/json",Authorization:`Bearer ${this.config.apiKey}`},r=await(0,v.default)(o,{method:"POST",headers:n,body:JSON.stringify(e)});if(!r.ok){let a=await r.text();throw r.status===401?new s("Invalid API key. Please check your credentials.",401):r.status===403?new s("Insufficient credits. Please top up your account.",403):new s(`Modal API error: ${r.status} ${a}`,r.status)}return r}async image(e){let o=`${this.config.baseUrl}/image`,n={"Content-Type":"application/json",Authorization:`Bearer ${this.config.apiKey}`},r=await(0,v.default)(o,{method:"POST",headers:n,body:JSON.stringify(e)});if(!r.ok){let a=await r.text();throw r.status===401?new s("Invalid API key. Please check your credentials.",401):r.status===403?new s("Insufficient credits. Please top up your account.",403):new s(`Modal API error: ${r.status} ${a}`,r.status)}return r}};var P=class{constructor(e={}){if(!e.apiKey)throw new s("API key is required. Please provide an API key in the client configuration.");if(!e.apiKey.startsWith("om_")||e.apiKey.length<10)throw new s('Invalid API key format. API keys must start with "om_" and be at least 10 characters long.');let o=e.baseUrl||"https://tryscout.dev",n=r=>o.includes("modal.run")||o.includes("/api/")?o:o.includes(".")?`${o}/api/${r}`:`https://tryscout.dev/api/${r}`;this.textProvider=new g({apiKey:e.apiKey,baseUrl:n("text")}),this.embedProvider=new g({apiKey:e.apiKey,baseUrl:n("embed")}),this.imageProvider=new g({apiKey:e.apiKey,baseUrl:n("image")})}async chat(e){try{let o=await this.textProvider.chat(e);return e.stream?E(o):await o.json()}catch(o){throw o instanceof Error?new s(o.message):new s("Unknown error occurred")}}async embed(e){try{return await(await this.embedProvider.embed(e)).json()}catch(o){throw o instanceof Error?new s(o.message):new s("Unknown error occurred")}}async image(e){try{return await(await this.imageProvider.image(e)).json()}catch(o){throw o instanceof Error?new s(o.message):new s("Unknown error occurred")}}};function y(t){return new P(t)}var d=m(require("chalk")),$=m(require("ora"));var I=m(require("fs")),R=m(require("path")),U=m(require("os"));function f(){let t=R.join(U.homedir(),".openmodels","config.json");if(!I.existsSync(t))return{baseUrl:"https://modal.run/api/v1"};try{let e=JSON.parse(I.readFileSync(t,"utf8"));return e["base-url"]&&!e.baseUrl&&(e.baseUrl=e["base-url"]),e}catch{return console.log("Warning: Could not read config file, using defaults"),{baseUrl:"https://modal.run/api/v1"}}}var j=new O.Command("chat").description("Chat with AI models").argument("[message]","Message to send to the AI").option("-m, --model <model>","Model to use","microsoft/DialoGPT-medium").option("-s, --stream","Stream the response",!1).option("-t, --temperature <temp>","Temperature for generation","0.7").option("-k, --max-tokens <tokens>","Maximum tokens to generate","200").option("-i, --interactive","Interactive chat mode",!1).action(async(t,e)=>{let o=f(),n=y(o);e.interactive?await re(n,e):t?await te(n,t,e):(console.log(d.default.red("Error: Please provide a message or use --interactive mode")),process.exit(1))});async function te(t,e,o){let n=(0,$.default)("Generating response...").start();try{let r={model:o.model,messages:[{role:"user",content:e}],max_tokens:parseInt(o.maxTokens),temperature:parseFloat(o.temperature),stream:o.stream};if(o.stream){n.stop();let a=await t.chat(r);process.stdout.write(d.default.blue("Response: "));for await(let i of a)process.stdout.write(i);console.log()}else{let a=await t.chat(r);n.stop(),console.log(d.default.blue("Response:")),console.log(a.choices[0].message.content)}}catch(r){n.stop(),console.error(d.default.red("Error:"),r),process.exit(1)}}async function re(t,e){console.log(d.default.green('Interactive chat mode. Type "exit" to quit.')),console.log(d.default.gray(`Using model: ${e.model}`));let n=require("readline").createInterface({input:process.stdin,output:process.stdout}),r=()=>{n.question(d.default.blue("You: "),async a=>{if(a.toLowerCase()==="exit"){n.close();return}let i=(0,$.default)("Generating response...").start();try{let u={model:e.model,messages:[{role:"user",content:a}],max_tokens:parseInt(e.maxTokens),temperature:parseFloat(e.temperature),stream:!1},S=await t.chat(u);i.stop(),console.log(d.default.green("AI:"),S.choices[0].message.content),console.log(),r()}catch(u){i.stop(),console.error(d.default.red("Error:"),u),r()}})};r()}var T=require("commander");var w=m(require("chalk")),G=m(require("ora"));var L=new T.Command("embed").description("Generate text embeddings").argument("<text>","Text to embed").option("-m, --model <model>","Embedding model to use","sentence-transformers/all-MiniLM-L6-v2").option("-f, --format <format>","Output format (json, values)","json").option("-u, --url <url>","Custom embedding backend URL").action(async(t,e)=>{let o=f(),n=e.url||o.embedUrl||o.baseUrl,r=y({baseUrl:n}),a=(0,G.default)("Generating embedding...").start();try{let i=await r.embed({model:e.model,input:t});a.stop(),e.format==="values"?(console.log(w.default.blue("Embedding values:")),console.log(i.data[0].embedding.slice(0,10).map(u=>u.toFixed(4)).join(", ")),console.log(w.default.gray(`... (${i.data[0].embedding.length} dimensions)`))):(console.log(w.default.blue("Embedding response:")),console.log(JSON.stringify(i,null,2)))}catch(i){a.stop(),console.error(w.default.red("Error:"),i),process.exit(1)}});var K=require("commander");var b=m(require("chalk")),N=m(require("ora")),z=m(require("fs")),D=m(require("path"));var B=new K.Command("image").description("Generate images from text prompts").argument("<prompt>","Text prompt for image generation").option("-m, --model <model>","Image model to use","stabilityai/stable-diffusion-xl-base-1.0").option("-s, --size <size>","Image size","1024x1024").option("-q, --quality <quality>","Image quality (standard, hd)","standard").option("-n, --number <number>","Number of images to generate","1").option("-o, --output <file>","Output file path").option("-u, --url <url>","Custom image backend URL").action(async(t,e)=>{let o=f(),n=e.url||o.imageUrl||o.baseUrl,r=y({baseUrl:n}),a=(0,N.default)("Generating image...").start();try{let i=await r.image({model:e.model,prompt:t,size:e.size,quality:e.quality,n:parseInt(e.number)});a.stop();let u=i.data[0];if(u.b64_json){let S=Buffer.from(u.b64_json,"base64"),V=e.output||`generated_image_${Date.now()}.png`,q=D.resolve(V);z.writeFileSync(q,S),console.log(b.default.green("\u2713 Image generated successfully!")),console.log(b.default.blue("Saved to:"),q),console.log(b.default.gray(`Model: ${i.model}`)),console.log(b.default.gray(`Size: ${e.size}`))}}catch(i){a.stop(),console.error(b.default.red("Error:"),i),process.exit(1)}});var F=require("commander"),c=m(require("chalk"));var J=new F.Command("models").description("List available models").option("-t, --type <type>","Filter by model type (text, embed, image)","all").action(async t=>{let e=f(),o={text:["microsoft/DialoGPT-medium","microsoft/DialoGPT-large","facebook/blenderbot-400M-distill","EleutherAI/gpt-neo-2.7B","EleutherAI/gpt-j-6B","microsoft/DialoGPT-small","distilgpt2"],embed:["sentence-transformers/all-MiniLM-L6-v2","sentence-transformers/all-mpnet-base-v2","BAAI/bge-large-en","BAAI/bge-base-en","sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2","sentence-transformers/all-MiniLM-L12-v2"],image:["stabilityai/stable-diffusion-xl-base-1.0","runwayml/stable-diffusion-v1-5","stabilityai/stable-diffusion-2-1","CompVis/stable-diffusion-v1-4"]};t.type==="all"?(console.log(c.default.blue("Available Models:")),console.log(),console.log(c.default.green("Text Generation Models:")),o.text.forEach(n=>{console.log(`  ${c.default.cyan("\u2022")} ${n}`)}),console.log(),console.log(c.default.green("Embedding Models:")),o.embed.forEach(n=>{console.log(`  ${c.default.cyan("\u2022")} ${n}`)}),console.log(),console.log(c.default.green("Image Generation Models:")),o.image.forEach(n=>{console.log(`  ${c.default.cyan("\u2022")} ${n}`)})):o[t.type]?(console.log(c.default.blue(`${t.type.charAt(0).toUpperCase()+t.type.slice(1)} Models:`)),o[t.type].forEach(n=>{console.log(`  ${c.default.cyan("\u2022")} ${n}`)})):(console.log(c.default.red("Error: Invalid model type. Use: text, embed, image, or all")),process.exit(1))});var _=require("commander"),p=m(require("chalk")),l=m(require("fs")),x=m(require("path")),M=m(require("os")),k=new _.Command("config").description("Manage OpenModels configuration").command("set").description("Set configuration values").argument("<key>","Configuration key (api-key, base-url, embed-url, image-url)").argument("<value>","Configuration value").action(async(t,e)=>{let o=x.join(M.homedir(),".openmodels","config.json"),n=x.dirname(o);l.existsSync(n)||l.mkdirSync(n,{recursive:!0});let r={};if(l.existsSync(o))try{r=JSON.parse(l.readFileSync(o,"utf8"))}catch{console.log(p.default.yellow("Warning: Could not read existing config, creating new one"))}r[t]=e,l.writeFileSync(o,JSON.stringify(r,null,2)),console.log(p.default.green(`\u2713 Set ${t} = ${e}`))});k.command("get").description("Get configuration values").argument("[key]","Configuration key to get (optional)").action(async t=>{let e=W();t?e[t]?console.log(p.default.blue(`${t}:`),e[t]):(console.log(p.default.red(`Configuration key '${t}' not found`)),process.exit(1)):(console.log(p.default.blue("Current configuration:")),Object.entries(e).forEach(([o,n])=>{console.log(`  ${p.default.cyan(o)}: ${n}`)}))});k.command("list").description("List all configuration values").action(async()=>{let t=W();console.log(p.default.blue("Current configuration:")),Object.entries(t).forEach(([e,o])=>{console.log(`  ${p.default.cyan(e)}: ${o}`)})});function W(){let t=x.join(M.homedir(),".openmodels","config.json");if(!l.existsSync(t))return{baseUrl:"https://modal.run/api/v1"};try{return JSON.parse(l.readFileSync(t,"utf8"))}catch{return console.log(p.default.yellow("Warning: Could not read config file, using defaults")),{baseUrl:"https://modal.run/api/v1"}}}var h=new Q.Command;h.name("openmodels").description("CLI for OpenModels - Open-source AI models SDK").version("0.3.0");h.addCommand(j);h.addCommand(L);h.addCommand(B);h.addCommand(J);h.addCommand(k);h.parse();
//# sourceMappingURL=index.js.map